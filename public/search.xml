<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Mac OS上AppStore无法登陆的问题]]></title>
      <url>%2F2017%2F01%2F26%2Fmac-appstore-log-failed%2F</url>
      <content type="text"><![CDATA[问题由来不久前更新了MacBook Air的操作系统，随后便发现AppStore无法登陆账号。一直提示This action could not be completed. Try again.当时认为这可能是网络的问题，除此之外，国内连接AppStore向来不是很稳定。懒得去折腾，也不急于一时。 这几天想尝试下用Swift开发点IOS应用，安装XCode的时候发现AppStore还是登陆不上，下搞啥呀！果断打客服电话~然后跟着客服操作了一通，啥安全模式呀，重启呀啥的，注册新账号尝试呀~搞了大半天，浪费了无数电话费！！还是没解决！！ 解决方案没办法了，靠谁都不如靠自己，度娘不行就谷歌。皇天不负有心人，终于找到了一下的解决方法（尝试了下，终于成功了）: 找到/Users/Shared文件夹查看其权限当时我的Shared文件夹的权限是 drwxr-xr-t 修改/Users/Shared目录权限 操作系统版本大于OS X 10.6 sudo chmod -R 1777 /Users/Shared 操作系统版本OS X 10.5.x或更早版本，请运行以下命令： sudo chmod -R 777 /Users/Shared 如果没有Shared文件夹则创建一个，修改为上面的权限 重启AppStore后重新尝试登陆就可以了 为什么会这样 /Users/Shared是什么目录，修改这个文件夹权限会不会有安全问题？ 这个目录并不表示系统中有一个用户叫做Shared，所以他不是任何用户的主目录（千万别把它当成“共享（sharing）用户”的主目录！），那么它是做什么的呢？Mac OS X系统希望通过这样一个目录提供另外一种用户之间共享数据的方法。该目录可以被任意用户读写，但它不应该存放与任何应用程序有关的信息，当然，除非某用户非要这么做。这个目录很像传统Unix系统中的/tmp目录，用于各（系统）用户临时存放或者交换文件。 所以这个文件夹理论上就应该是大家都能读写，就是一个临时目录，修改他的权限为777不会造成安全问题 /Users/Shared权限不对为什么会造成AppStore登录异常？ 根上的问题上App Store在登录时需要读写/Users/Shared/adi目录下的文件，权限问题导致这个目录写入出现问题。安全模式呀，重启啊，更换账号都是无法解决这个问题。修改权限才是正解！！]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[基于Hexo + Git + Nginx的博客发布]]></title>
      <url>%2F2017%2F01%2F23%2FmyBlog-deploy%2F</url>
      <content type="text"><![CDATA[进过上一篇《树莓派搭建私人服务器》,我们已经有一个私人服务器了，现在需要做点什么实际事情了，先搭一个博客分享自己的经验吧。 相关文章：1.《树莓派搭建私人服务器》 (http://www.uthinks.xyz/2017/01/23/RaspberryPi-init/) 准备工作 环境已经初始化的树莓派 Git服务器，我用的是自己搭建的Git服务器，当然也可以使用GitHud Nginx Hexo，我朋友已经写过关于Hexo详细的文档，这里就不在赘述。 (http://luckykun.com/work/2016-04-23/heoll-hexo.html) Git服务器搭建 首先在树莓派上安装Git，同时确保ssh已经正确安装并且默认开启 sudo apt-get install wget git-core 添加git用户和组，其实就是Linux普通用户就行 adduser git passwd git 切换到git用户，增加一个新的Git仓库 cd /home/git mkdir blog cd blog git init --bare 本地把blog项目迁移下来, 刚刚初始化的仓库是没有任何分支的，后面提交代码的时候会自动生成一个master分支。后面hexo直接在该目录下搭建 git clone git@[域名 | IP]:/home/git/blog 至此，一个自己的git服务器已经搭建完成 附录 初始化空Git仓库git init 和 git init –bare有什么区别 (http://blog.csdn.net/feizxiang3/article/details/8065506) Nginx安装配置 首先安装nginx sudo apt-get install nginx 修改nginx配置文件 /etc/nginx/nginx.conf user www-data; worker_processes 4; pid /run/nginx.pid; events { worker_connections 768; # multi_accept on; } http { server { listen 8081; # 这个目录是hexo生成的页面路径，后面提交到git的页面同步到这个目录下 location / { root /home/bill/blog/public; index index.html; } # 这个配置是静态文件：图片、文件下载路径，有另外一个git仓库管理，一样同步到对应目录下 location ~ ^/resource/picture/(.*)? { alias /home/bill/resource/picture/$1 ; add_header Cache-control max-age=7200,s-maxage=3600; } } ## # Basic Settings ## sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; # server_tokens off; # server_names_hash_bucket_size 64; # server_name_in_redirect off; include /etc/nginx/mime.types; default_type application/octet-stream; ## # SSL Settings ## ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE ssl_prefer_server_ciphers on; ## # Logging Settings ## access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; ## # Gzip Settings ## gzip on; gzip_disable &quot;msie6&quot;; # gzip_vary on; # gzip_proxied any; # gzip_comp_level 6; # gzip_buffers 16 8k; # gzip_http_version 1.1; # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript; ## # Virtual Host Configs ## include /etc/nginx/conf.d/*.conf; include /etc/nginx/sites-enabled/*; } 启动nginx sudo /etc/init.d/nginx start | restart | stop 博客的发布环境已经搭建完成了，如何实现把文件提交到Git自动同步到nginx目录下完成发布呢？ 1.如果你使用的GitHud的话这个问题很简单，这里就不在赘述。参考我朋友的hexo教程 (http://luckykun.com/work/2016-04-23/heoll-hexo.html) 2.现在说说我的方法，其实也很简单 编写一个简单的git pull脚本 import os if name == ‘main‘: #blog分支同步 os.chdir(&apos;/home/bill/blog/&apos;) os.system(&apos;git pull origin master&apos;) #静态文件同步 os.chdir(&apos;/home/bill/resource/&apos;) os.system(&apos;git pull origin master&apos;) 定时任务配置 crontab -e */1 * * * * /usr/bin/python /home/bill/deploy/deploy.py 如果我的文章对你有帮助，或者有什么疑问。欢迎在下方留言，一起交流讨论]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[树莓派搭建私人服务器]]></title>
      <url>%2F2017%2F01%2F23%2FRaspberryPi-init%2F</url>
      <content type="text"><![CDATA[阿里云服务器又涨价了，感觉已经负担不起了，但是又想拥有一台自己的私人服务器。某天，突然发现了树莓派，价格便宜、高可用。心血来潮！！说搞就搞！！ 准备工作 首先当然是有一台树莓派3代B型，淘宝价格￥190 + 周边 = ￥216 可以搞定（两个半月的阿里云ECS，还是蛮实惠的） 支持端口映射的路由器（基本现在市面上的路由器都支持端口映射），我用的是小米路由器 买一个属于自己的域名，如：www.uthinks.com 具有公网ip的宽带，我家使用的联通20M宽带，很幸运有一个公网的IP。如果没有公网IP，需要借助花生壳来做内网穿透，不仅麻烦还有流量限制。 树莓派装机系统安装 下载树莓派系统镜像（https://www.raspberrypi.org/downloads/） 接着就是把镜像烧入SD卡，windows下需要下载win32diskimager(http://download.csdn.net/detail/longerzone/7574047)。 解压镜像和win32diskimager（绿色版打开即可使用），插入SD卡 –&gt; 打开win32diskimager –&gt; 添加镜像 –&gt; 确认SD卡后点击烧写即可 烧写结束后，在windows下SD卡会显示只有不到100M，不用担心，因为这个分区只是Linux 的boot分区，而其他内容作为Linux 的文件系统被挂载为ext4 文件系统，Windows 下识别不了而已 把烧好的SD卡直接插入树莓派SD卡槽中，接上电源等待系统安装完成 系统配置 系统配置过程还是碰到很多坑，大家有什么问题可以直接联系我，我会补充出来 ssh无法登陆的问题 由于树莓派默认没有打开sshd，所以我用HDMI连接上显示器，执行命令sudo raspi-config 找到ssh然后enable后重启就ok了 动态域名解析（DDNS） 家里办理的联通宽带有公网IP，决定好好利用，但是公网IP不固定，需要动态修改域名解析。 注册域名 在阿里云上购买自己喜欢的域名（抓紧时间备案，不然网站会被封） (https://wanwang.aliyun.com/domain/com?spm=5176.8142029.388261.128.anTrkC) 如果有公网IP配置一条A记录，如果你使用的是花生壳配置一条CNAME记录 如何实现动态域名解析 下面给出的是python主要的核心代码，如果需要完整的环境代码请留言联系我。树莓派系统镜像中自带Python，还是很方便的 获取自己的公网出口IP import urllib2 def getIp(): try: ip = visit(&quot;http://www.ip138.com/ip2city.asp&quot;) except: ip = &quot;failed to get internet ip&quot; return ip def visit(url): req = urllib2.Request(url) opener = urllib2.urlopen(req) result = opener.read() return result[result.find(&apos;[&apos;) + 1: result.find(&apos;]&apos;)] 下载alidns python SDK(https://develop.aliyun.com/sdk/java?spm=5176.doc29772.416540.246.rjauTQ) 解压安装sudo python setup.py install 安装alidns python SDKpip install aliyun-python-sdk-alidns 第1步获取到自己的公网IP后，调用API设置DNS解析 import json from aliyunsdkalidns.request.v20150109 import UpdateDomainRecordRequest,DescribeDomainRecordsRequest, \ DescribeDomainRecordInfoRequest, AddDomainRecordRequest from aliyunsdkcore import client # 更新域名解析 def updateDns(accessKey, accessKeySecret, hostRecord, dnsType, dnsValue, dnsRecordid, dnsTtl, returnFormat): print hostRecord, dnsType, dnsValue, dnsRecordid, dnsTtl, returnFormat clt = client.AcsClient(accessKey, accessKeySecret, &apos;cn-hangzhou&apos;) request = UpdateDomainRecordRequest.UpdateDomainRecordRequest() request.set_RR(hostRecord) request.set_Type(dnsType) request.set_Value(dnsValue) request.set_RecordId(dnsRecordid) request.set_TTL(dnsTtl) request.set_accept_format(returnFormat) result = clt.do_action(request) return result # 获取当前的解析IP def getDnsIp(accessKey, accessKeySecret, dnsRecordid, returnFormat): clt = client.AcsClient(accessKey, accessKeySecret, &apos;cn-hangzhou&apos;) request = DescribeDomainRecordInfoRequest.DescribeDomainRecordInfoRequest() request.set_accept_format(returnFormat) request.set_RecordId(dnsRecordid) result = clt.do_action(request) result = json.JSONDecoder().decode(result) result = result[&apos;Value&apos;] return result 路由器端口映射，配置完成记得点击保存并且生效 最后一步把动态解析脚本配置到crontab中定时执行 /1 * /usr/bin/python /home/bill/basic/BasicTask.py 附： accessKey、accessKeySecret如何获取 登录阿里云控制台(https://ak-console.aliyun.com/#/accesskey) 域名解析RecoreId如何获取 # dns_domain 域名 如uthinks.com def check_records(dnsDomain): clt = client.AcsClient(accessKeyId, accessKeySecret, &apos;cn-hangzhou&apos;) request = DescribeDomainRecordsRequest.DescribeDomainRecordsRequest() request.set_DomainName(dnsDomain) request.set_accept_format(&apos;json&apos;) result = clt.do_action(request) print result return result 返回值： { &quot;PageNumber&quot;: 1, &quot;TotalCount&quot;: 2, &quot;PageSize&quot;: 20, &quot;RequestId&quot;: &quot;***&quot;, &quot;DomainRecords&quot;: { &quot;Record&quot;: [ { &quot;RR&quot;: &quot;*&quot;, &quot;Status&quot;: &quot;ENABLE&quot;, &quot;Value&quot;: &quot;****&quot;, &quot;RecordId&quot;: &quot;****&quot;, &quot;Type&quot;: &quot;A&quot;, &quot;DomainName&quot;: &quot;uthinks.com&quot;, &quot;Locked&quot;: false, &quot;Line&quot;: &quot;default&quot;, &quot;TTL&quot;: &quot;600&quot; }, ] } } 如果我的文章对你有帮助，或者有什么疑问。欢迎在下方留言，一起交流讨论]]></content>
    </entry>

    
  
  
</search>
